from string import ascii_uppercase
from openpyxl import load_workbook
from datetime import datetime
import numpy as np
import json

CONFIG = json.load(open('./config/config.json'))
tcr, pristine = 0.30, 0.015

def update_cell_values_prod(x, intermediate_df, prod_specs_df, demands):
    """ part of changelog efforts to perform permenant or scenario study updates. Designed to use concurrently with df.apply method
    and param x refers to each row in the dataframe. Captures edge cases for TCR and Pristine percentage changes. Permanent changes
    updates the main configuration file, intermediate dataframe and updates accordingly in the changelog. Scenario studies updates 
    the intermediate dataframe only. Any error will be reflected in the changelog accordingly.
    :param intermediate_df: intermediate dataframe generated by various join methods
    :type intermediate_df: pd.DataFrame
    :param prod_sepcs_df: input changelog for products
    :type prod_specs_df: pd.DataFrame
    :param demands: demand headers
    :type demands: list
    ...
    :return: the updated intermediate df based on permanent & scenario study changes. 
    :rtype: pd.DataFrame
    """
    global tcr, pristine
    prod, breakdown_type, from_value, to_value, permanent, timeframe = x['Product'], x['Breakdown Type'], x['From'], x['To'], x['Scenario Study / Permanent'], x['Time']
    if '>=' in timeframe:
        try:
            if '_' in timeframe:
                timeframe = list(demands)[list(demands).index(timeframe.split(' ')[-1].split('_')[0]):]
            else:
                timeframe = list(demands)[list(demands).index(timeframe.split(' ')[-1]):]
        except:
            timeframe = list(demands)
    else:
        timeframe = [timeframe]
    permanent_bool = True if permanent == 'Permanent' else False

    ## HARD CODED
    if breakdown_type == 'TCR' or breakdown_type == 'PRISTINE':
        if breakdown_type == 'TCR':
            tcr = to_value
        elif breakdown_type == 'PRISTINE':
            pristine = to_value
        fise_percentage = tcr + pristine
        ## ADJUST VARIAN FISE 5/6/SFEM
        for time in timeframe:
            indexes = np.where((intermediate_df['Component'] == 'FISE 5/6/SFEM') & (intermediate_df['Time'] == time))
            indexes2 = np.where((intermediate_df['Product'] == 'Varian') & (intermediate_df['Component'] == 'FISE 5/6/SFEM') & (intermediate_df['Time'] == time))
            if breakdown_type == 'TCR':
                indexes3 = np.where((intermediate_df['Component'] == 'FISE TCR') & (intermediate_df['Time'] == time))
            else: 
                indexes3 = np.where((intermediate_df['Component'] == 'FISE PRISTINE') & (intermediate_df['Time'] == time))
            if len(indexes[0]) == 0:
                if 'Updated' in permanent: # Avoid classifying it as an error
                    return intermediate_df 

                workbook2 = load_workbook(filename=CONFIG['Excel']['Quarterly_Capacity']['Path'])
                worksheet2 = workbook2['Changelog (Products)']  
                target_cell2 = 'H' + str(x.name+2)
                worksheet2[target_cell2] = 'Please Check Input Again'
                workbook2.save(filename=CONFIG['Excel']['Quarterly_Capacity']['Path'])    
                return intermediate_df
            
            for index in indexes[0]: # Updates intermediate df
                intermediate_df.at[index, 'Breakdown_Quantity'] = 1 - fise_percentage
            
            for index in indexes2[0]:
                intermediate_df.at[index, 'Breakdown_Quantity'] = -fise_percentage
            
            for index in indexes3[0]:
                intermediate_df.at[index, 'Breakdown_Quantity'] = to_value

            if permanent_bool:
                ## UPDATE PRODUCT SPECS CONFIGURATION FILE
                indexes = np.where((prod_specs_df['Type'] == 'FISE 5/6/SFEM') )
                indexes2 = np.where((prod_specs_df['Product'] == 'Varian') & (prod_specs_df['Type'] == 'FISE 5/6/SFEM'))
                if breakdown_type == 'TCR':
                    indexes3 = np.where((prod_specs_df['Type'] == 'FISE TCR') )
                else:
                    indexes3 = np.where((prod_specs_df['Type'] == 'FISE PRISTINE') )
                workbook = load_workbook(filename=CONFIG['Excel']['Configurations']['Path'])
                worksheet = workbook['Product Specs']
                for index in indexes[0]:
                    target_cell = 'C' + str(index+2)
                    worksheet[target_cell] = 1 - fise_percentage

                for index in indexes2[0]:
                    target_cell = 'C' + str(index+2)
                    worksheet[target_cell] = -fise_percentage

                for index in indexes3[0]:
                    target_cell = 'C' + str(index+2)
                    worksheet[target_cell] = to_value              
                workbook.save(filename=CONFIG['Excel']['Configurations']['Path'])
                
                ## UPDATE CHANGELOG TO PERMANENET (UPDATED)
                workbook2 = load_workbook(filename=CONFIG['Excel']['Quarterly_Capacity']['Path'])
                worksheet2 = workbook2['Changelog (Products)']
                target_cell2 = 'F' + str(x.name+2)
                worksheet2[target_cell2] = 'Permanent (Updated as of ' + datetime.today().strftime('%Y-%m-%d') + ')'
                workbook2.save(filename=CONFIG['Excel']['Quarterly_Capacity']['Path'])   

        return intermediate_df 
    
    try:
        for time in timeframe:           
            if prod == '-': # Targeted at all products for a particular component
                indexes = np.where((intermediate_df['Component'] == breakdown_type) & (intermediate_df['Breakdown_Quantity'] == from_value) & (intermediate_df['Time'] == time))
            elif breakdown_type == '-':
                indexes = np.where((intermediate_df['Product'] == prod) & (intermediate_df['Breakdown_Quantity'] == from_value))
            else:
                indexes = np.where((intermediate_df['Product'] == prod) & (intermediate_df['Component'] == breakdown_type) & (intermediate_df['Breakdown_Quantity'] == from_value) & (intermediate_df['Time'] == time))
            if len(indexes[0])==0:
                if 'Updated' in permanent: # Avoid classifying it as an error
                    return intermediate_df 
                workbook2 = load_workbook(filename=CONFIG['Excel']['Quarterly_Capacity']['Path'])
                worksheet2 = workbook2['Changelog (Products)']  
                target_cell2 = 'H' + str(x.name+2)
                worksheet2[target_cell2] = 'Please Check Input Again'
                workbook2.save(filename=CONFIG['Excel']['Quarterly_Capacity']['Path'])    
                return intermediate_df
            for index in indexes[0]: # Updates intermediate df
                intermediate_df.at[index, 'Breakdown_Quantity'] = to_value 
            
            if permanent_bool:
                ## UPDATE PRODUCT SPECS CONFIGURATION FILE
                if prod == '-':
                    indexes = np.where((prod_specs_df['Type'] == breakdown_type))
                elif breakdown_type == '-':
                    indexes = np.where((prod_specs_df['Product'] == prod))
                else:
                    indexes = np.where((prod_specs_df['Product'] == prod) & (prod_specs_df['Type'] == breakdown_type))
                workbook = load_workbook(filename=CONFIG['Excel']['Configurations']['Path'])
                worksheet = workbook['Product Specs']
                for index in indexes[0]:
                    target_cell = 'C' + str(index+2)
                    worksheet[target_cell] = to_value
                workbook.save(filename=CONFIG['Excel']['Configurations']['Path'])
                
                ## UPDATE CHANGELOG TO PERMANENET (UPDATED)
                workbook2 = load_workbook(filename=CONFIG['Excel']['Quarterly_Capacity']['Path'])
                worksheet2 = workbook2['Changelog (Products)']
                target_cell2 = 'F' + str(x.name+2)
                worksheet2[target_cell2] = 'Permanent (Updated as of ' + datetime.today().strftime('%Y-%m-%d') + ')'
                workbook2.save(filename=CONFIG['Excel']['Quarterly_Capacity']['Path'])    
    except: 
        print(f'{prod}')
        pass
    return intermediate_df

LETTERS = {index : letter for index, letter in enumerate(ascii_uppercase, start=0)}

def update_cell_values_op(x, intermediate_df, wc_specs_df, demands):
    """ part of changelog efforts to perform permenant or scenario study updates. Designed to use concurrently with df.apply method
    and param x refers to each row in the dataframe. Permanent changes updates the main configuration file, intermediate dataframe 
    and updates accordingly in the changelog. Scenario studies updates the intermediate dataframe only. Any error will be reflected 
    in the changelog accordingly.
    :param intermediate_df: intermediate dataframe generated by various join methods
    :type intermediate_df: pd.DataFrame
    :param wc_sepcs_df: input changelog for work centers/operations
    :type wc_specs_df: pd.DataFrame
    :param demands: demand headers
    :type demands: list
    ...
    :return: the updated intermediate df based on permanent & scenario study changes. 
    :rtype: pd.DataFrame
    """
    op, target_specification, from_value, to_value, permanent, timeframe = x['Operation'], x['Target Specification'], x['From'], x['To'], x['Scenario Study / Permanent'], x['Time']
    if '>=' in timeframe:
        try:
            if '_' in timeframe:
                timeframe = list(demands)[list(demands).index(timeframe.split(' ')[-1].split('_')[0]):]
            else:
                timeframe = list(demands)[list(demands).index(timeframe.split(' ')[-1]):]
        except:
            timeframe = list(demands)
    else:
        timeframe = [timeframe]
    permanent_bool = True if permanent == 'Permanent' else False
    
    try:
        for time in timeframe:
            indexes = np.where((intermediate_df['Operation'] == op) & (intermediate_df[target_specification] == from_value) & (intermediate_df['Time'] == time))
            if len(indexes[0])==0:
                if 'Updated' in permanent:
                    return intermediate_df
                workbook2 = load_workbook(filename=CONFIG['Excel']['Quarterly_Capacity']['Path'])
                worksheet2 = workbook2['Changelog (Operations)']  
                target_cell2 = 'H' + str(x.name+2)
                worksheet2[target_cell2] = 'Please Check Input Again'
                workbook2.save(filename=CONFIG['Excel']['Quarterly_Capacity']['Path'])    
                return intermediate_df
            for index in indexes[0]:
                intermediate_df.at[index, target_specification] = to_value       
        if permanent_bool:
            ## UPDATE OP SPECS CONFIGURATION FILE
            indexes = np.where((wc_specs_df['Operation'] == op) & (wc_specs_df[target_specification] == from_value))
            workbook = load_workbook(filename=CONFIG['Excel']['Configurations']['Path'])
            worksheet = workbook['Op Specs']
            for index in indexes[0]:
                column_index = list(wc_specs_df.columns).index(target_specification)
                column_alphabet = LETTERS[column_index]
                target_cell = column_alphabet + str(index+2)
                worksheet[target_cell] = to_value
            workbook.save(filename=CONFIG['Excel']['Configurations']['Path'])
            
            ## UPDATE CHANGELOG TO PERMANENET (UPDATED)
            workbook2 = load_workbook(filename=CONFIG['Excel']['Quarterly_Capacity']['Path'])
            worksheet2 = workbook2['Changelog (Operations)']           
            target_cell2 = 'F' + str(x.name+2)
            worksheet2[target_cell2] = 'Permanent (Updated as of ' + datetime.today().strftime('%Y-%m-%d') + ')'
            workbook2.save(filename=CONFIG['Excel']['Quarterly_Capacity']['Path'])    
    except:
        print(f'{op}')
        pass
    return intermediate_df